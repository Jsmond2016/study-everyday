import{_ as e,c as r,ag as t,o as l}from"./chunks/framework.BFjg9GqD.js";const p=JSON.parse('{"title":"0721","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/07/0721.md","filePath":"record-2021/07/0721.md"}'),o={name:"record-2021/07/0721.md"};function i(n,a,h,s,c,d){return l(),r("div",null,a[0]||(a[0]=[t('<h1 id="_0721" tabindex="-1">0721 <a class="header-anchor" href="#_0721" aria-label="Permalink to &quot;0721&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/MistyTor_ZH-CN7520952555_1920x1080.jpg" alt=""></p><h2 id="工作" tabindex="-1">工作 <a class="header-anchor" href="#工作" aria-label="Permalink to &quot;工作&quot;">​</a></h2><ul><li>关于代码设计：</li></ul><p>本次需求迭代中，需要自定义很多封装的组件，为了承载这些组件，定义了 容器组件。但是涉及和其他子组件交互，就会有很多 子组件操作父组件数据的行为。</p><p>最开始是使用的 useState，即页面最小状态管理的方式。写到后面发现这样做会有很多方法传来传去，绕的我头疼。思考这么写的代码一定有问题。毕竟好的代码都是简单易于理解的。</p><p>改变：</p><p>使用 dva 状态管理，涉及操作 父级数据的行为，直接将数据提取到 store，使用 dispatch 去操作。所有复杂的数据操作行为都丢到 store 这个数据中心去处理。</p><p>改完部分实现后，发现梳理逻辑的时候舒服多了；早就该这么写，不应该等到现在做错了才花时间去处理。</p><p>反思：</p><ul><li>代码设计：当页面组件较多，涉及很多父子组件数据通信，需要考虑引入 store 层状态管理。</li><li>这也是前端设计方案的一种方式和体现。</li></ul><h2 id="任务" tabindex="-1">任务 <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;任务&quot;">​</a></h2><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6987197729046790175#heading-14" target="_blank" rel="noreferrer">React核心原理浅析</a></li></ul><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6987070062490288165" target="_blank" rel="noreferrer">手撕钉钉前端考试卷</a> 多而全，需要细看。</li></ul><h2 id="好用的工具" tabindex="-1">好用的工具 <a class="header-anchor" href="#好用的工具" aria-label="Permalink to &quot;好用的工具&quot;">​</a></h2><h2 id="todos" tabindex="-1">TODOS <a class="header-anchor" href="#todos" aria-label="Permalink to &quot;TODOS&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/92832843" target="_blank" rel="noreferrer">React16源码解析(一)- 图解Fiber架构</a> React 源码系列，值得一看</li><li><a href="https://github.com/Jsmond2016/react-router-dom-nut" target="_blank" rel="noreferrer">react-router原理实现</a> 有时间将这个文章梳理一下，每一个细节的实现要记住。</li></ul>',19)]))}const _=e(o,[["render",i]]);export{p as __pageData,_ as default};
