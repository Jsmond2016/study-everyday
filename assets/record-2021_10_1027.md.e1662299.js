import{_ as s,o as a,c as n,V as l}from"./chunks/framework.e0e258e1.js";const C=JSON.parse('{"title":"1027","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/10/1027.md","filePath":"record-2021/10/1027.md"}'),o={name:"record-2021/10/1027.md"},p=l(`<h1 id="_1027" tabindex="-1">1027 <a class="header-anchor" href="#_1027" aria-label="Permalink to &quot;1027&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/HyacinthMacaws_ZH-CN1191345036_1920x1080.jpg" alt=""></p><h2 id="工作" tabindex="-1">工作 <a class="header-anchor" href="#工作" aria-label="Permalink to &quot;工作&quot;">​</a></h2><ul><li>html2pdf 问题：</li></ul><p>问题一：JSON 含有转义字符反序列化失败问题</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 方案一，让后端将序列化的数据替换掉下面的 &quot;{{data}}&quot;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dataSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{data}}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里需要前端对数据进行反序列化</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(dataSource)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 方案二 直接使用 dataSource，格式为 { &quot;name&quot;: value }，这种既是 json 格式又是 对象格式，不需要反序列化</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dataSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{data}}</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>方案一带来的问题：如果 数据中含有转义字符，例如：<code>\\n, \\t, \\r</code> 等</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hh</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">VM274</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> Uncaught </span><span style="color:#FFCB6B;">SyntaxError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Unexpected token o </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> JSON at position </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    at JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">anonymous</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    at </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">anonymous</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">:1:6</span></span></code></pre></div><p>解决方案就是，使用 <code>JSON.parse(val, replacer, fn)</code> 的第二个参数替换掉转义字符；</p><p>随后发现 后端转成 json 的数据是 <code>{ &quot;name&quot;: value }</code> 这就可以直接当做 对象使用，就不再需要使用 反序列化了</p><p>问题描述二：pdf 模板打印空白问题</p><p>编写好 html 模板后，在本地 启动和使用 mock 数据测试没有问题，但是到了 html2pdf 服务中进行转换就整个页面白屏，猜测问题：</p><ol><li>js 语法有问题，解析失败；</li><li>js 数据边界考虑错误，代码报错；</li><li>js 代码没执行；</li></ol><p>因为本地是 最新的 chrome 浏览器，语法什么的都是兼容的；本地测试是没有问题的；但是 服务器上打印服务的 浏览器环境就不是了；</p><p>查看了服务器上打印服务依赖的浏览器环境是 Electron 2.x 版本功能，看了下，是 18年左右的旧版本，当前的 Electron 版本已经是 15.x 了，差别还是很大的，最大的影响就是一些新特性语法不支持；</p><p>我的做法：</p><ul><li>写段 js 插入 dom 操作验证 js 是可以执行的， success；</li><li>拿到导致 pdf 白屏的数据，本地 mock 测试，确定是否是边界问题，success；</li><li>最后，确定是语法兼容性问题了，我的做法： <ul><li>使用 babel 在线将代码转换成 es5，结果 fail，这种做法也不方便后期维护代码；</li><li>因为 核心逻辑是依赖某一个 ts 文件的，因此 build 该 ts 文件，copy 其 build 完的 js 文件进行小部分修改， success；</li></ul></li></ul><p>整整一天时间，因为不方便调试，所有时间都在改代码，上传服务器，测试环境验证....循环往复；</p><p>一直到晚上9 点左右，才走到最后一步，解决这个 pdf 打印空白问题；</p><p>正准备下班了，结果发现，公司公共组开发的<strong>水印</strong>功能有问题：pdf 的第二页没有水印；</p><p>但是本地测试是好的呀，诶，头大.......明天再看吧~~~</p><h2 id="反思" tabindex="-1">反思 <a class="header-anchor" href="#反思" aria-label="Permalink to &quot;反思&quot;">​</a></h2><p>遇到问题了，才有成长和进步，老大最后解决问题了，看我的代码写的这么长，仔细梳理了一下，发现我的很多代码很多冗余的，以及<strong>业务和数据聚合耦合</strong>了，代码需要深度优化！！</p><p>也确实，有问题有指导才能进步~~~</p>`,24),t=[p];function e(c,r,i,y,D,F){return a(),n("div",null,t)}const u=s(o,[["render",e]]);export{C as __pageData,u as default};
