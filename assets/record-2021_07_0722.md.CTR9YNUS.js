import{_ as a,c as i,a2 as e,o as t}from"./chunks/framework.ek9jOonm.js";const o=JSON.parse('{"title":"0722","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/07/0722.md","filePath":"record-2021/07/0722.md"}'),n={name:"record-2021/07/0722.md"};function l(h,s,p,r,k,d){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="_0722" tabindex="-1">0722 <a class="header-anchor" href="#_0722" aria-label="Permalink to &quot;0722&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/SalzburgKrampus_ZH-CN7355658592_1920x1080.jpg" alt=""></p><h2 id="工作" tabindex="-1">工作 <a class="header-anchor" href="#工作" aria-label="Permalink to &quot;工作&quot;">​</a></h2><p><strong>onChange 的坑！！</strong></p><ul><li><a href="https://ant.design/components/tabs-cn/#header" target="_blank" rel="noreferrer">AntD 中 Tab</a> 组件使用问题：遇到一个奇怪的 bug：删除 某个 tab 的时候，对应的 activeKey 需要手动改变到当前 tabList 的最后一个 tab 上，但是不管是使用 useState 还是使用 model 层，都会报错，获取到的 activeKey 是错的。</li><li>一开始以为是 useState 的问题，打 log 发现，删除操作的时候 model 改变了 2 次，第一次是改变是改变 tabList 和 activeKey，删除操作和改变当前的 activeKey，传的数据正确。第二次改变的时候，activeKey 是旧的，又把 activeKey 改变了回来。但是旧的 activeKey 被删除了找不到了，自然就报错了。</li><li>最后，发现真相是在 <code>onChange</code> 上：原本以为 onChange 事件只会在鼠标点击切换 tab 的时候会触发。没想到只要 tab 切换了，不论 任何方式，都会触发。</li><li>所以，使用的时候，尽量使用 <code>onClick</code> 事件避免不必要的问题。</li></ul><p><strong>dvajs</strong> 在 effects 中获取 state：</p><p>通常，如果是同步操作的 reducer ，获取 state 的方式为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reducers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, { payload }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>但是，如果在 effects 呢？需要使用 <code>select</code> 获取</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">effects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMasterInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ payload }, { call, put, select }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> masterInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> yield</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OptionsConfigState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.masterInfo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reducers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, { payload }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>相关资料：</p><ul><li><a href="https://dvajs.com/guide/introduce-class.html#effect" target="_blank" rel="noreferrer">dvajs-Effect</a> 官网没看到 select 的使用介绍。</li><li><a href="https://blog.csdn.net/weixin_40792878/article/details/82051078" target="_blank" rel="noreferrer">dva学习---effects异步中通过select获取当前的state</a></li></ul><h2 id="任务" tabindex="-1">任务 <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;任务&quot;">​</a></h2><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/92SLJQsX7Mpif_sEcr3PQA" target="_blank" rel="noreferrer">万字干货！详解JavaScript执行过程</a></li></ul><h2 id="好用的工具" tabindex="-1">好用的工具 <a class="header-anchor" href="#好用的工具" aria-label="Permalink to &quot;好用的工具&quot;">​</a></h2><h2 id="todos" tabindex="-1">TODOS <a class="header-anchor" href="#todos" aria-label="Permalink to &quot;TODOS&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/92832843" target="_blank" rel="noreferrer">React16 源码解析(一)- 图解 Fiber 架构</a> React 源码系列，值得一看</li><li><a href="https://github.com/Jsmond2016/react-router-dom-nut" target="_blank" rel="noreferrer">react-router 原理实现</a> 有时间将这个文章梳理一下，每一个细节的实现要记住。</li></ul>`,18)]))}const E=a(n,[["render",l]]);export{o as __pageData,E as default};
