import{_ as i,c as a,a2 as n,o as e}from"./chunks/framework.ek9jOonm.js";const c=JSON.parse('{"title":"1117","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/11/1117.md","filePath":"record-2021/11/1117.md"}'),l={name:"record-2021/11/1117.md"};function t(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_1117" tabindex="-1">1117 <a class="header-anchor" href="#_1117" aria-label="Permalink to &quot;1117&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/Aldeyjarfoss_ZH-CN0106567013_1920x1080.jpg" alt=""></p><h2 id="工作" tabindex="-1">工作 <a class="header-anchor" href="#工作" aria-label="Permalink to &quot;工作&quot;">​</a></h2><ul><li>新需求，正常开发</li><li><strong>问题1：</strong> 项目无法启动，报错 etcd 相关问题</li></ul><p>排查方式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>etcd 问题排查经过记录：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1-找到 etcd.url 报错的那一行</span></span>
<span class="line"><span>2-查看代码，取 url 有 2 种 方式： 默认设定（错误），环境变量 process.env.etcdUrl</span></span>
<span class="line"><span>3- 删除 env 的 etcdUrl ，重启 命令行，重新运行，搞定</span></span></code></pre></div><p>这里有个问题，url 是从 环境变量 env 中拿到的，在 *inux 系统的命令行中国，直接输入 <code>env</code> 是可以直接显示环境变量的，但是在 windows 中是不行的；</p><p><strong>那么，windows 如何查看 <code>env</code> 环境变量呢？</strong></p><p>方法1： 既然是环境变量，那么 右键 【我的电脑】——【属性】——【高级系统变量设置】——环境变量，可以看到 【系统环境变量】和 【用户环境变量】，此时通过 关键词就能看到，我的 ETCD_URL 在 【用户环境变量】这里已经配置了旧的错误地址，删除即可；</p><p>方法2： 命令行进入 <code>cmd</code> 输入 <code>node</code> ，进入 <code>node</code> 环境模式，输入 <code>process.env</code> 即可看到环境变量；为什么要输入 <code>process</code> ？ 因为看到代码里面是从 <code>process.env.ETCD_URL</code> 这样取值的。</p><p>方法3： 进入 windows 的 wsl ubuntu 子系统中，命令行内直接输入 <code>env</code> 即可看到</p><ul><li><strong>问题2：</strong> 输入端含有 特殊字符，Go 服务报错；</li></ul><p>上一个需求上线，测试发现一个问题，有个活动名字为 <code>活动名称 &lt;img src=&#39;xxx&#39; /&gt;</code> ，然后在搜索框内输入 上面同名的活动名，搜索不出结果；但是 前端 接口和bff 没有报错信息；排查问题发现，在后端 ORM 中生成的 sql，对于上述特殊字符没有进行特殊处理，直接存入数据库；</p><p>实际上，上述活动名称 <code>活动名称 &lt;img src=&#39;xxx&#39; /&gt;</code>，这里实际上是存在 XSS 攻击风险 / sql 注入的风险的；这是一个隐患，感觉得提早提出这个问题，在所有输入端，要考虑过滤特殊字符问题；</p><h2 id="今日算法" tabindex="-1">今日算法 <a class="header-anchor" href="#今日算法" aria-label="Permalink to &quot;今日算法&quot;">​</a></h2><p>今日学习：</p><p>今日复习：</p><ul><li><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noreferrer">101. 对称二叉树</a></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isSymmetric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root.left, root.right)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right.val) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(left.left, right.right) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(left.right, right.left)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="温故知新" tabindex="-1">温故知新 <a class="header-anchor" href="#温故知新" aria-label="Permalink to &quot;温故知新&quot;">​</a></h2><blockquote><p>防抖节流等各种手写，http和网络，浏览器原理，性能优化，Webpack</p></blockquote><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><blockquote><p>有感好文</p></blockquote><ul><li><a href="https://juejin.cn/post/6844903894301016078" target="_blank" rel="noreferrer">实战篇 - 如何实现和淘宝移动端一样的模块化加载 （task-silce）</a></li><li><a href="https://juejin.cn/post/7022933131694964744" target="_blank" rel="noreferrer">双缓存</a></li><li><a href="https://juejin.cn/post/6987681953424080926" target="_blank" rel="noreferrer">一篇讲透自研的前端错误监控</a> 关于前端错误监控的全面系统的深度好文</li><li><a href="https://www.yuque.com/xianjs/eg7dq1" target="_blank" rel="noreferrer">专栏-前端监控</a> 从设计、搭建、落地 详细讲述前端监控的实现</li><li><a href="https://mp.weixin.qq.com/s/s3DeAxrEbVmqtCHGP9lstg" target="_blank" rel="noreferrer">Node.js 多进程/线程 —— 日志系统架构优化实践</a> Nodejs 进程/线程相关深度好文</li></ul><p>Nodejs 自查几个问题：</p><p>1-关于 Nodejs 的多进程，相关知识点有 child_process，cluster，但是多线程呢？多线程：<code>worker_threads </code></p><p>2-Nodejs 进程通信，分为 父、子进程，因父子进程有继承关系，通信方式为 process.on()，但是没有继承关系的 兄弟进程如何进行通信呢？方案一可以使用 父进程 作为桥梁进行转发；方案二可以采用 【命名管道】</p><p>3-Nodejs 多线程的应用？多进程的缺点？</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>多线程：由于充分利用 CPU，所以执行的最快。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>多进程：由于每个进程中都有一个线程，同样能充分利用 CPU，但是进程创建的开销要比线程大，所以执行的略慢于多线程。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>单线程：由于 CPU 利用不充分所以慢于多线程和多进程，但是由于多线程 / 多进程的创建需要一定的开销，所以快于单个线程执行时间 * 线程个数。</span></span></code></pre></div><p>以上内容，来自 <a href="https://mp.weixin.qq.com/s/s3DeAxrEbVmqtCHGP9lstg" target="_blank" rel="noreferrer">Node.js 多进程/线程 —— 日志系统架构优化实践</a></p>`,30)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
