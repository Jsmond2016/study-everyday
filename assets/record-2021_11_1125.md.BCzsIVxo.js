import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.ek9jOonm.js";const l="/study-everyday/assets/redux-toolkit.C-qCpMaU.png",h="/study-everyday/assets/re-study-fe.DpcSVuZ0.jpg",y=JSON.parse('{"title":"1125","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/11/1125.md","filePath":"record-2021/11/1125.md"}'),e={name:"record-2021/11/1125.md"};function p(k,s,r,E,d,g){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="_1125" tabindex="-1">1125 <a class="header-anchor" href="#_1125" aria-label="Permalink to &quot;1125&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/JaneAusten_ZH-CN2508681308_1920x1080.jpg" alt=""></p><h2 id="工作" tabindex="-1">工作 <a class="header-anchor" href="#工作" aria-label="Permalink to &quot;工作&quot;">​</a></h2><p><img src="'+l+`" alt=""></p><ul><li>技术栈转型：<code>Redux Toolkit</code>，相关文档：<a href="https://redux-toolkit-cn.netlify.app/introduction/quick-start" target="_blank" rel="noreferrer">Redux Toolkit中文文档</a></li><li>review 代码学习提升：</li></ul><p>需求：输入框查询搜索</p><p>常用思路：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSearch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keyword</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { keyword }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx/searchList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, payload: { params }})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input.Search</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSearch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyword)} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新思路：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setKeyword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 发送请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx/searchList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, payload: { params }})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, [keyword])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, [getData])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSearch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keyword</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setKeyword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyword)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input.Search</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSearch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyword)} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>刚开始我还奇怪，keywod 改变后居然没有调用 发送请求的方法，但是页面能够正常发送请求 ；而且 keyword 并没有直接作为 useEffect 发送请求的依赖；</p><p>原来，这里的<strong>调用链</strong>是这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Input.onSearch --&gt; change keyword --&gt; change method getData --&gt; trigger useEffect --&gt; getData() --&gt; ajax --&gt; getList</span></span></code></pre></div><p>这里，参数不止有 keyword, 还有其他如分页信息等；</p><p><strong>使用这种写法，代码量少，看着也【高级感 满满】，后续也方便拓展——直接加在依赖上即可~~</strong></p><h2 id="反思" tabindex="-1">反思 <a class="header-anchor" href="#反思" aria-label="Permalink to &quot;反思&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6944286031990489101" target="_blank" rel="noreferrer">一个前端失败者的自我剖析与反思</a> 发现<strong>我身上也有作者类似的问题：能干活，但是不深入，三年经验，一年的能力。所以要改变观念，跳出舒适圈提升自己，为自己以后的职业发展铺路</strong>。</li><li><a href="https://juejin.cn/post/6944901422789951496" target="_blank" rel="noreferrer">面试题：如何实现一个拖拽插件</a> 也是上面作者的面试学习文章，<strong>这种问题我也遇到过</strong>，记录一下，后续可能需要；</li><li><a href="https://juejin.cn/post/7012542827204706318" target="_blank" rel="noreferrer">程序员一定会有35岁危机吗</a> 听一听黄奕老师对于程序员如何长期稳定在这个行业发展的看法和职业规划路；</li></ul><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><blockquote><p>有感好文</p></blockquote><p><img src="`+h+'" alt=""></p><ul><li><a href="https://juejin.cn/post/7033207826646466574" target="_blank" rel="noreferrer">重学前端，知识体系构建</a> 为了避免 <strong>三年经验，一年水平</strong> 的问题，一条好的出路就是**【建立自己的知识体系】**</li><li><a href="https://juejin.cn/post/7031829689261883405" target="_blank" rel="noreferrer">常用的前端JavaScript方法封装</a> 这些内容可以封装成自己项目中常用的 npm 库</li><li><a href="https://juejin.cn/post/6909247394904702984" target="_blank" rel="noreferrer">【Vue3官方教程】万字笔记 | 同步导学视频</a></li></ul><h2 id="项目推荐" tabindex="-1">项目推荐 <a class="header-anchor" href="#项目推荐" aria-label="Permalink to &quot;项目推荐&quot;">​</a></h2><blockquote><p>值得学习的项目</p></blockquote><ul><li><a href="https://juejin.cn/post/6890757905352491021" target="_blank" rel="noreferrer">Vue、Node全栈项目~面向小白的博客系统~</a></li><li><a href="https://github.com/qiheizhiya/myBlog" target="_blank" rel="noreferrer">博客项目地址-github</a></li><li><a href="https://juejin.cn/post/6962897454781956133" target="_blank" rel="noreferrer">前端进阶：细数2年内我做的15个开源项目</a> 大佬 徐小夕 的开源作品</li></ul><h2 id="面经相关" tabindex="-1">面经相关 <a class="header-anchor" href="#面经相关" aria-label="Permalink to &quot;面经相关&quot;">​</a></h2><blockquote><p>八股文相关</p></blockquote><ul><li><a href="https://juejin.cn/post/7031923575044964389" target="_blank" rel="noreferrer">后端一次给你10万条数据，如何优雅展示，到底考察我什么</a> 如何处理性能问题？setTimeout, requestAnimationFrame, 懒加载，虚拟列表...</li><li><a href="https://juejin.cn/post/7031322059414175774" target="_blank" rel="noreferrer">10个常见的前端手写功能</a></li></ul>',27)]))}const c=i(e,[["render",p]]);export{y as __pageData,c as default};
