import{_ as a,c as i,ag as e,o as t}from"./chunks/framework.BFjg9GqD.js";const c=JSON.parse('{"title":"0907 今日总结","description":"","frontmatter":{},"headers":[],"relativePath":"record-2023/09/0907.md","filePath":"record-2023/09/0907.md"}'),n={name:"record-2023/09/0907.md"};function l(r,s,h,p,k,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="_0907-今日总结" tabindex="-1">0907 今日总结 <a class="header-anchor" href="#_0907-今日总结" aria-label="Permalink to &quot;0907 今日总结&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/CamelsAbove_ZH-CN1389810021_1920x1080.jpg" alt=""></p><h2 id="今日工作" tabindex="-1">今日工作 <a class="header-anchor" href="#今日工作" aria-label="Permalink to &quot;今日工作&quot;">​</a></h2><blockquote><p>问题，原因，解决方式，优化，巧妙实现，新知识</p></blockquote><h3 id="number-和-number-的区别" tabindex="-1">number 和 Number 的区别； <a class="header-anchor" href="#number-和-number-的区别" aria-label="Permalink to &quot;number 和 Number 的区别；&quot;">​</a></h3><p>还是在做技术性需求，注意力转移到 组件的 ts 类型优化；</p><p>遇到有人的类型写成这种：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>实际上，ts 中只有 <code>number</code> 这种类型，<code>Number</code> 其实算是包装 <code>number</code> 对象类型；上述写法会让人觉得纳闷，实际上是有区别的；参考如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//primitive number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Number object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numObject;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Compile Error </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numValue;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*****</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*****</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is not assignable to type </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is a primitive, but </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is a wrapper object. Prefer using </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> when possible.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2322</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">一句话总结</p><p>使用 <code>number</code> 和 <code>Number</code> 作为 类型约束时，若使用 <code>new Number(n)</code> 的方式定义数字，无法匹配 <code>number</code>，因为它是一个对象；</p></div><p>参考资料：</p><ul><li><a href="https://www.tektutorialshub.com/typescript/typescript-number/" target="_blank" rel="noreferrer">TypeScript Number Data Type - TekTutorialsHub</a></li><li><a href="https://stackoverflow.com/questions/67155108/what-is-the-difference-between-number-and-number-in-typescript" target="_blank" rel="noreferrer">javascript - What is the difference between &quot;number&quot; and &quot;Number&quot; in TypeScript? - Stack Overflow</a></li></ul><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><blockquote><p>有感好文</p></blockquote><h3 id="react-hooks-学习" tabindex="-1">React Hooks 学习 <a class="header-anchor" href="#react-hooks-学习" aria-label="Permalink to &quot;React Hooks 学习&quot;">​</a></h3><p>做 react 开发，经常会定义一些 hook，可以通过如下 hook 开源项目学习如何封装 hook；</p><ul><li><a href="https://mantine.dev/hooks/use-queue/" target="_blank" rel="noreferrer">Mantine--hooks</a></li><li><a href="https://github.com/antonioru/beautiful-react-hooks" target="_blank" rel="noreferrer">antonioru/beautiful-react-hooks</a></li><li><a href="https://gpingfeng.github.io/ahooks-analysis/" target="_blank" rel="noreferrer">ahooks analysis - ahooks 源码分析</a></li></ul><h3 id="网页重新部署通知用户" tabindex="-1">网页重新部署通知用户 <a class="header-anchor" href="#网页重新部署通知用户" aria-label="Permalink to &quot;网页重新部署通知用户&quot;">​</a></h3><p>几篇文章分别有不同的方案：使用 <code>setInterval</code> 轮训；使用 <code>WebSocket</code>； 方案实现；</p><ul><li><a href="https://juejin.cn/post/7209234917288886331" target="_blank" rel="noreferrer">网页重新部署，通知用户-最佳实践 - 掘金</a></li><li><a href="https://juejin.cn/post/7264396960558399549?searchId=202309071412534E221FCB5709011D2A05" target="_blank" rel="noreferrer">前端重新部署如何通知用户 - 掘金</a></li><li><a href="https://juejin.cn/post/7185451392994115645?searchId=202309071412534E221FCB5709011D2A05" target="_blank" rel="noreferrer">前端重新部署如何通知用户刷新网页？ - 掘金</a></li></ul><h3 id="关于-vs-code-的-dev-container" tabindex="-1">关于 vs code 的 dev container <a class="header-anchor" href="#关于-vs-code-的-dev-container" aria-label="Permalink to &quot;关于 vs code 的 dev container&quot;">​</a></h3><p>利用 docker 搭建 dev container，这样一次搭建，不同设备都能<strong>保持环境一致性</strong>；</p><ul><li><a href="https://juejin.cn/post/7250670781633118268?searchId=20230907133813B9692AA78068C019ACBF" target="_blank" rel="noreferrer">提升前端开发体验：利用 Dev Containers 实现高效开发 - 掘金</a></li><li><a href="https://juejin.cn/post/7182100280438325308?searchId=20230907133813B9692AA78068C019ACBF" target="_blank" rel="noreferrer">手把手提高开发体验：dev-containe - 掘金</a></li><li><a href="https://github.com/FrankFang/oh-my-docker" target="_blank" rel="noreferrer">FrankFang/oh-my-docker: Use docker container as your dev env.</a></li><li><a href="https://github.com/FrankFang/oh-my-env-1" target="_blank" rel="noreferrer">FrankFang/oh-my-env-1</a></li></ul><h2 id="项目-博客推荐" tabindex="-1">项目/博客推荐 <a class="header-anchor" href="#项目-博客推荐" aria-label="Permalink to &quot;项目/博客推荐&quot;">​</a></h2><blockquote><p>值得学习 作者/项目/工具等</p></blockquote><h3 id="博客" tabindex="-1">博客 <a class="header-anchor" href="#博客" aria-label="Permalink to &quot;博客&quot;">​</a></h3><ul><li><a href="https://tjy-gitnub.github.io/" target="_blank" rel="noreferrer">炫酷的博客-星源</a> 一个酷的个人博客，作者 2009 年出生，现在才 14 岁，厉害了！！！！</li></ul><h3 id="项目" tabindex="-1">项目 <a class="header-anchor" href="#项目" aria-label="Permalink to &quot;项目&quot;">​</a></h3><ul><li><a href="https://tjy-gitnub.github.io/win12/desktop.html" target="_blank" rel="noreferrer">windows-12</a> 上面作者的项目，很好看；</li><li><a href="https://github.com/react-component" target="_blank" rel="noreferrer">react-component</a> 一个开源的库，antd 的 ui 组件基础库，参考可以学习学习组件封装；</li></ul><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><a href="https://docs.volta.sh/guide/understanding#managing-your-toolchain" target="_blank" rel="noreferrer">Understanding Volta | Volta</a> 这个工具可以限制项目使用的 node 版本，且能够做到自动切换版本，如下例子：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;volta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12.20.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;yarn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.19.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33)]))}const u=a(n,[["render",l]]);export{c as __pageData,u as default};
