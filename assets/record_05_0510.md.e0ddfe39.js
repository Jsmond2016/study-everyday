import{o as n,c as a,a as s}from"./app.0f622102.js";const t='{"title":"0510","description":"","frontmatter":{},"headers":[{"level":2,"title":"工作","slug":"工作"},{"level":2,"title":"学习","slug":"学习"},{"level":2,"title":"反思","slug":"反思"},{"level":2,"title":"明日计划","slug":"明日计划"}],"relativePath":"record/05/0510.md","lastUpdated":1626104115182}',p={},o=s('<h1 id="_0510"><a class="header-anchor" href="#_0510" aria-hidden="true">#</a> 0510</h1><h2 id="工作"><a class="header-anchor" href="#工作" aria-hidden="true">#</a> 工作</h2><ul><li><p>前端水印优化、提测：</p><ul><li>字体边界处理：考虑水印字体的最小值，不能单纯的使用 <code>width * 2%</code> 作为字体大小，最小值限制为 <code>12px</code> 以上</li><li>图片边界处理：忽略不规则比例的图片，那种很长很扁的图片导致的水印问题，不处理；那种很小的头像类图片，不处理；</li><li><code>vux</code> 中使用上传组件时，有个小坑：第一次上传校验失败的文件，二次上传同一个文件时，会缓存 <code>File</code> 的 <code>value</code> 值，这样就不会触发 <code>onchange</code> 事件。解决方法：<code>this.$refs.pathClear.value =&#39;&#39;</code> ，详情：</li></ul><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload-image add-image<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add-phpne<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uploadForm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token style language-css"><span class="token property">z-index</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pathClear<span class="token punctuation">&quot;</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token style language-css"><span class="token property">z-index</span><span class="token punctuation">:</span> 10</span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload-input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uploadImage($event)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../assets/camera.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>camera-image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- \n\nmethods: {\n\tuploadImage: function (event) {\n\t\t// this.$refs.pathClear.value =&#39;&#39;\n\t\t// 第一次触发后，这里不会二次触发\n\t\t// validate...return\n\t}\n}\n\n--&gt;</span>\n\n</code></pre></div><ul><li>函数内需要等待异步操作的返回结果时，使用 <code>promise</code> ：遇到一个函数A调用函数B，关系大致如下：</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里的 b 是 undefined</span>\n    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getR1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n        <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> r2\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>看上面的代码，拿到的结果 b 是空的，因为下面函数 B 返回是 void，虽然异步操作 <code>onload</code> 最后有返回，但是因为是异步，因此拿不到。</p><p>改进：</p><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里的 b 是 有值的</span>\n    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getR1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//...</span>\n            <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>不知道为啥自己一时间脑子短路，居然忘了异步返回怎么处理，诶！！</p></li></ul><h2 id="学习"><a class="header-anchor" href="#学习" aria-hidden="true">#</a> 学习</h2><ul><li>优秀文章</li><li>算法</li></ul><h2 id="反思"><a class="header-anchor" href="#反思" aria-hidden="true">#</a> 反思</h2><ul><li>做的不好的</li><li>做的好的</li></ul><h2 id="明日计划"><a class="header-anchor" href="#明日计划" aria-hidden="true">#</a> 明日计划</h2><ul><li>水印优化</li><li>PDP</li><li>重构进入开发</li></ul>',9);p.render=function(s,t,p,e,c,l){return n(),a("div",null,[o])};export default p;export{t as __pageData};
