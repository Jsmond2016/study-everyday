import{_ as s,o as a,c as n,V as e}from"./chunks/framework.e0e258e1.js";const C=JSON.parse('{"title":"0829 今日总结","description":"","frontmatter":{},"headers":[],"relativePath":"record-2023/08/0829.md","filePath":"record-2023/08/0829.md"}'),l={name:"record-2023/08/0829.md"},o=e(`<h1 id="_0829-今日总结" tabindex="-1">0829 今日总结 <a class="header-anchor" href="#_0829-今日总结" aria-label="Permalink to &quot;0829 今日总结&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/TetonBison_ZH-CN9384306649_1920x1080.jpg" alt=""></p><h2 id="今日工作" tabindex="-1">今日工作 <a class="header-anchor" href="#今日工作" aria-label="Permalink to &quot;今日工作&quot;">​</a></h2><blockquote><p>问题，原因，解决方式，优化，巧妙实现，新知识</p></blockquote><h3 id="vite-环境配置" tabindex="-1">Vite 环境配置 <a class="header-anchor" href="#vite-环境配置" aria-label="Permalink to &quot;Vite 环境配置&quot;">​</a></h3><p>今天项目配置需要增加 环境配置，我们有三个环境 <code>fat/uat/pro</code></p><p>习惯性使用 <a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noreferrer">cross-env</a> 配置，查看 vite 环境配置后发现，应该使用 <a href="https://cn.vitejs.dev/guide/env-and-mode.html#env-files" target="_blank" rel="noreferrer">vite 规范的方式</a></p><p>例如：</p><div class="language-env"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.env                # 所有情况下都会加载</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre></div><p>上面的 <code>mode</code> 可以在打包脚本中规定，如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 对于 .env.local 文件，使用</span></span>
<span class="line"><span style="color:#A6ACCD;">vite build --mode=local</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 对于 .env.development 文件，使用</span></span>
<span class="line"><span style="color:#A6ACCD;">vite build --mode=development</span></span></code></pre></div><p>需要注意的是，自定义的环境变量需要添加 vite 规定的前缀 <code>VITE_</code> 才能被识别并暴露出来；</p><p>当然，也可以自定义环境变量前缀：<a href="https://cn.vitejs.dev/config/shared-options.html#envprefix" target="_blank" rel="noreferrer">envprefix</a></p><p>以及，vite 自带一些环境变量：可以 打印下 <code>i<wbr>mport.meta.env</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// console.log(&#39;envs: &#39;, i<wbr>mport.meta.env)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BASE_URL</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MODE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DEV</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">PROD</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SSR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>自定义环境变量期间，我遇到了这个问题：<a href="https://github.com/vitejs/vite/issues/6572" target="_blank" rel="noreferrer">dev is always true after build</a></p><p>配置 <code>NODE_ENV</code> 后解决，参考这里 <a href="https://www.jianshu.com/p/1e85185796d8" target="_blank" rel="noreferrer">例子</a></p><p>参考：</p><ul><li><a href="https://juejin.cn/post/7184349482102816825" target="_blank" rel="noreferrer">vite多环境配置 - 掘金</a></li><li><a href="https://cloud.tencent.com/developer/article/2091634" target="_blank" rel="noreferrer">Vite弃坑指南之：环境文件系统-腾讯云开发者社区-腾讯云</a></li><li><a href="https://cloud.tencent.com/developer/article/1951904" target="_blank" rel="noreferrer">Vite多环境配置：让项目拥有更高定制化能力-腾讯云开发者社区-腾讯云</a></li><li><a href="https://juejin.cn/post/7220243380621852728" target="_blank" rel="noreferrer">vue开发者vite多环境配置，终于搞明白了 - 掘金</a></li><li><a href="https://www.jianshu.com/p/1e85185796d8" target="_blank" rel="noreferrer">Vite多环境配置 - 简书</a></li><li><a href="https://segmentfault.com/a/1190000043467574" target="_blank" rel="noreferrer">typescript - vite+ts+vue3环境变量和模式配置</a></li></ul><h3 id="webpack-插件开发" tabindex="-1">Webpack 插件开发 <a class="header-anchor" href="#webpack-插件开发" aria-label="Permalink to &quot;Webpack 插件开发&quot;">​</a></h3><p>之前一段时间做了个技术性需求，分析公司通用组件，归类、优化、整理；</p><p>既然需要优化，肯定是看哪些组件使用频率高，被改动的多，就是最需要优化的；</p><p>为了统计，参考社区方案，并改动了一些代码对 通用组件库做了个统计；</p><p>其中，最难的一环不是 webpack 插件开发，而是 webpack 插件调试；</p><p><img src="https://github.com/Jsmond2016/blog/assets/25282180/3e142a57-cef9-4ee3-a849-4b2e396af2e4" alt="Snipaste_2023-08-29_21-55-08"></p><p>打包时不能用命令 <code>webpack</code>，而是显式地用 <code>node node_modules/webpack/bin/webpack.js</code>，以下是我的配置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node --inspect scripts/start.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node --inspect scripts/build.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><img src="https://github.com/Jsmond2016/blog/assets/25282180/c05d6693-f573-4368-9c67-010202cf5fb7" alt="Snipaste_2023-08-29_21-58-50"></p><ul><li><a href="https://juejin.cn/post/7077484559893266439" target="_blank" rel="noreferrer">100行代码实现一个组件引用次数统计插件 - 掘金</a></li><li><a href="https://juejin.cn/post/6936084555476500488" target="_blank" rel="noreferrer">50行代码实现组件使用次数统计 - 掘金</a></li><li><a href="https://www.cnblogs.com/superlizhao/p/13646701.html" target="_blank" rel="noreferrer">用node的调试工具进行webpack插件调试</a></li><li><a href="https://blog.csdn.net/fesfsefgs/article/details/119983556" target="_blank" rel="noreferrer">webpack 中编写自定义 loader 和 plugin, 及如何调试</a></li><li><a href="https://cloud.tencent.com/developer/article/1839746" target="_blank" rel="noreferrer">WebPack 插件调试</a></li></ul><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><blockquote><p>有感好文</p></blockquote><ul><li><a href="https://cloud.tencent.com/developer/article/1969893" target="_blank" rel="noreferrer">Vite2+React+TypeScript：搭建企业级轻量框架实践-腾讯云开发者社区-腾讯云</a></li><li><a href="https://blog.csdn.net/weixin_42353499/article/details/121103556" target="_blank" rel="noreferrer">css 同时设置min-width、width、max-width时是如何展示的_PQ℡的博客-CSDN博客</a> 几个宽度的关系；</li><li><a href="https://www.syncfusion.com/blogs/post/implementing-react-custom-hooks-a-complete-guide.aspx" target="_blank" rel="noreferrer">Implementing React Custom Hooks: A Complete Guide | Syncfusion Blogs</a> 自定义 react-hooks 教程；</li></ul><p><strong>react hook 如何包裹一个组件：</strong></p><p>场景，打开一个自定义弹框：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// forwardRef 方案</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> XXXDialog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">forward</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">myRef</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useImperativeHandle</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">open</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">openModal</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Modal</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">myRef</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">open</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">openModal</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用: 伪代码</span></span>
<span class="line"><span style="color:#A6ACCD;">XXXDialogRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// hook 方案</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Modal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/** 逻辑代码 */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> YYYDialog</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> openModal </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useComponent</span><span style="color:#A6ACCD;">(Modal)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用：伪代码</span></span>
<span class="line"><span style="color:#82AAFF;">openModal</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><ul><li><a href="https://stackoverflow.com/questions/58469220/react-hooks-return-children-wrapping-component" target="_blank" rel="noreferrer">javascript - React Hooks return children wrapping component - Stack Overflow</a></li><li><a href="https://www.youtube.com/watch?v=-UjbTFc9NL4&amp;t=26s" target="_blank" rel="noreferrer">How to return components from React hooks</a></li></ul><p>当我意识到这个技术话题的时候，组里的老大已经在研究很久了，已经在用着了，回头拎出来讨论讨论；</p>`,37),p=[o];function t(r,c,i,y,D,F){return a(),n("div",null,p)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
