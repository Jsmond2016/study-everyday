import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.ek9jOonm.js";const n="/study-everyday/assets/outfit-change.Cnmg7plk.png",g=JSON.parse('{"title":"1217 今日总结","description":"","frontmatter":{},"headers":[],"relativePath":"record-2023/12/1217.md","filePath":"record-2023/12/1217.md"}'),l={name:"record-2023/12/1217.md"};function h(r,s,p,k,o,d){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="_1217-今日总结" tabindex="-1">1217 今日总结 <a class="header-anchor" href="#_1217-今日总结" aria-label="Permalink to &quot;1217 今日总结&quot;">​</a></h1><p><img src="'+n+`" alt=""></p><p><strong>关键词：</strong> github-2FA 验证、js 换装技术、前端基建总结、promise.all 顺序、React 项目模板、阮一峰站内搜索工具、supercopy 插件、vscode 过期插件</p><h2 id="今日心情" tabindex="-1">今日心情 <a class="header-anchor" href="#今日心情" aria-label="Permalink to &quot;今日心情&quot;">​</a></h2><blockquote><p>所见所想，有感而发</p></blockquote><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><blockquote><p>有感好文，专题好文</p></blockquote><h3 id="top3" tabindex="-1">TOP3 <a class="header-anchor" href="#top3" aria-label="Permalink to &quot;TOP3&quot;">​</a></h3><ul><li><a href="https://blog.csdn.net/sinat_20174131/article/details/129686256" target="_blank" rel="noreferrer">Github 的 2FA 验证(Two-factor authentication)(不要慌，非常简单)_github 双重认证-CSDN 博客</a> 最近我的 github 每次登录都提醒，看了下相关文章，添加安全验证；</li><li><a href="https://www.douyin.com/user/MS4wLjABAAAAeIIkCgELXG6XdUxuE9nQ6W4AfS-aoPFbtmnBL8ytcYtBSyurgePBYZXJpB0LJBCT?modal_id=7312005881678433536&amp;vid=7234520148118408506" target="_blank" rel="noreferrer">模特换装效果</a></li><li><a href="https://humanaigc.github.io/outfit-anyone/" target="_blank" rel="noreferrer">优秀的 js 库-Outfit Anyone</a></li></ul><h3 id="英文推荐" tabindex="-1">英文推荐 <a class="header-anchor" href="#英文推荐" aria-label="Permalink to &quot;英文推荐&quot;">​</a></h3><ul><li><a href="https://corecursive.com/software-world-tour-with-son-luong-ngoc/" target="_blank" rel="noreferrer">Software World Tour With Son Luong Ngoc - CoRecursive Podcast</a> 作者是一个越南程序员，原来在 Lazada 工作。后来，Lazada 被阿里收购，他就来到阿里，在杭州西溪园区呆过一段时间。 现在，他已经跳槽到 Booking.com，本文是他讲述自己的故事，以及对阿里的感受。</li></ul><h3 id="其他好文" tabindex="-1">其他好文 <a class="header-anchor" href="#其他好文" aria-label="Permalink to &quot;其他好文&quot;">​</a></h3><ul><li><p><a href="https://juejin.cn/post/7256393626682163237" target="_blank" rel="noreferrer">被裁员了，记录下去年刚入职一个月时在组内关于前端基建的技术分享 - 掘金</a></p></li><li><p><a href="https://juejin.cn/post/6991852456128806948" target="_blank" rel="noreferrer">Nexus 搭建 npm 私有库 - 掘金</a></p></li><li><p><a href="https://stackoverflow.com/questions/6754919/json-stringify-function" target="_blank" rel="noreferrer">javascript - JSON.stringify function - Stack Overflow</a> 函数序列化，实际是转换成 字符串，后面使用 <code>eval</code> 执行；</p></li></ul><h3 id="复习-promise-all-执行顺序" tabindex="-1">复习-promise.all 执行顺序 <a class="header-anchor" href="#复习-promise-all-执行顺序" aria-label="Permalink to &quot;复习-promise.all 执行顺序&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法promiseA，返回一个Promise对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> promiseA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法promiseB，返回一个Promise对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> promiseB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按照A, B的顺序添加到promise数组中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promiseA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promiseB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出情况</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// B</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array [ &quot;A&quot;, &quot;B&quot; ]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">结论</p><ul><li>执行顺序：<strong>谁执行的快谁先打印</strong></li><li>返回顺序：<strong>按照 promise 的添加顺序返回</strong></li></ul></div><h2 id="项目-博客推荐" tabindex="-1">项目/博客推荐 <a class="header-anchor" href="#项目-博客推荐" aria-label="Permalink to &quot;项目/博客推荐&quot;">​</a></h2><blockquote><p>值得学习 作者/项目/工具等</p></blockquote><h3 id="项目" tabindex="-1">项目 <a class="header-anchor" href="#项目" aria-label="Permalink to &quot;项目&quot;">​</a></h3><ul><li><a href="https://github.com/DongHY1/starter-frontend" target="_blank" rel="noreferrer">DongHY1/starter-frontend: My FrontEnd Template</a> React + React Router + TypeScript 项目模板</li></ul><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><a href="https://www.apigpts.dev/tools" target="_blank" rel="noreferrer">阮一峰站内知识搜索</a> Aha Vector Search 网友整理了周刊过去介绍的所有工具软件，做了一个搜索引擎，提供语义搜索</li><li><a href="https://enablecopy.com/" target="_blank" rel="noreferrer">chrome 插件-SuperCopy</a></li><li><a href="https://www.bilibili.com/video/BV1Fw411t7md/" target="_blank" rel="noreferrer">这些 vscode 扩展，你应该卸载了</a>: Auto Close Tag、Auto Rename Tag、Auto Import、Settings Sync 和 TypeScript Hero 等</li><li><a href="https://stackoverflow.com/questions/51803668/visual-studio-code-how-to-automatically-change-the-matching-closing-tag" target="_blank" rel="noreferrer">html - Visual studio code: how to automatically change the matching closing tag - Stack Overflow</a></li></ul><div class="info custom-block"><p class="custom-block-title">提示</p><p>Since VSCode 1.44, you can enable automatic updating of matching tags like this:</p><ul><li>Go to File menu, Preferences and Settings</li><li>Search for <code>editor.linkedEditing</code></li><li>Enable &quot;Linked Editing&quot;</li></ul></div><ul><li>npm 库快速同步方式：可以点击淘宝镜像 <a href="https://npmmirror.com/" target="_blank" rel="noreferrer">https://npmmirror.com/</a> 网站，搜索要同步的包，然后点击如下图圆圈标记处，等待一会即可，如果不行，则同步 2 次。<a href="https://twitter.com/chenbimo/status/1735614450886193348" target="_blank" rel="noreferrer">--来源</a></li><li><a href="https://blog.csdn.net/weixin_44869002/article/details/108429528" target="_blank" rel="noreferrer">随记：git 常用指令(二)_git config --global core.ignorecase false-CSDN 博客</a> 之前就遇到过，项目在本地没问题，但是在服务器上打包确出问题，因为 git 文件提交默认大小写不敏感；设置方式；</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 大小写敏感设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.ignorecase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><p><strong>AST 相关</strong></p><ul><li><a href="https://juejin.cn/post/7084828685596885029" target="_blank" rel="noreferrer">apifox-to-ts - 掘金</a> 一个由 apifox 的接口文档生成 typescript 声明的小工具</li><li><a href="https://gist.github.com/banyudu/cf5a6c8ff4b6c8acec97a5517c0fa583" target="_blank" rel="noreferrer">前端 AST 处理实践指南（基于 ts-morph）</a></li><li><a href="https://ts-morph.com/" target="_blank" rel="noreferrer">ts-morph - Documentation</a></li></ul>`,27)]))}const E=i(l,[["render",h]]);export{g as __pageData,E as default};
