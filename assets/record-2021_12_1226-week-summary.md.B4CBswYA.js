import{_ as s,c as i,o as a,a3 as l}from"./chunks/framework.B1tUqxYT.js";const g=JSON.parse('{"title":"1226-周总结","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/12/1226-week-summary.md","filePath":"record-2021/12/1226-week-summary.md"}'),t={name:"record-2021/12/1226-week-summary.md"},e=l(`<h1 id="_1226-周总结" tabindex="-1">1226-周总结 <a class="header-anchor" href="#_1226-周总结" aria-label="Permalink to &quot;1226-周总结&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/UbehebeCrater_ZH-CN0157876978_1920x1080.jpg" alt=""></p><h2 id="问题盘点-学习总结" tabindex="-1">问题盘点/学习总结 <a class="header-anchor" href="#问题盘点-学习总结" aria-label="Permalink to &quot;问题盘点/学习总结&quot;">​</a></h2><blockquote><p>有问题记录问题，没问题记录学习感悟</p></blockquote><p>近期都没怎么做总结，感觉做成了月总结了，记录一下吧；</p><ul><li>可拖拽图片弹框技术预研；#1208</li><li>复习鼠标有关的事件；拖拽相关的属性 <code>draggable=&quot;true&quot;</code> 和事件以及案例；#1209</li><li>开发问题：#1210 <ul><li>事件注册后需要清除，避免新旧事件的互相干扰；使用 <code>getComputedStyle</code> 获取 dom 的相关属性；</li><li>图片使用 <code>transform</code> 后，旋转和拖拽移动需要分开图层，不要都作用在 图片上避免奇怪的问题；</li><li>js 精度问题处理，使用 <code>toFixed(2)</code></li></ul></li><li>使用 <code>getComputedStyle</code> 获取 dom 的属性 <code>matrix</code> 带来的坑，第三个参数 <code>rotate</code> 旋转角度不能高效使用，需要复杂的数学计算，这里不如 <code>style.transform</code> 来的简单容易；#1213</li><li>使用 <code>transform</code> 遇上 <code>position: fixed</code> 带来的问题，<code>position: fixed</code> 直接失效；#1214</li><li>拖拽 modal 不丝滑， 使用样式 <code>pointer-events: none</code> 解决；#1215</li><li>了解一下 React 的工具函数，如 <code>React.Children.map, forEach, count, toArray, cloneElement</code> 等；最后的 <code>cloneElement</code> 感觉开发可以用得上#1215</li><li>iframe click 事件无效，顺便了解一下 iframe 的那些坑，整理了一个<a href="./1216.html">合集</a>；#1216</li><li>学习：<a href="./1217.html">张鑫旭的博客学习记录</a><ul><li>一行代码实现暗黑模式</li><li>web 端 文件保存 新方式</li><li>不用 file 类型实现 文件上传</li><li>File System API</li><li>JS 的 WeakMap 什么时候用？</li><li>proxy 和 reflect 区别？</li><li>css revert 属性使用</li><li>其他的一些思考和启发</li></ul></li><li>学习：封装 axios 请求库 #1218</li><li>学习： <code>div</code> 监听 <code>keydown</code> 事件无效？怎么解决？<code>tabindex</code> #1221</li><li>学习：<code>window.atob / window.btoa</code> 无法加密中文？怎么加密？#1221</li><li>学习：Typora 替代品 Obsidian，学习一下；</li></ul><hr><h2 id="手撕代码-算法" tabindex="-1">手撕代码/算法 <a class="header-anchor" href="#手撕代码-算法" aria-label="Permalink to &quot;手撕代码/算法&quot;">​</a></h2><blockquote><p>防抖节流等各种手写，http和网络，浏览器原理，性能优化，Webpack</p></blockquote><p>使用 setTmeout 模拟 setInterval</p><p>看看 使用 setInterval 的例子；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>接下来使用 setTimeout 来模拟实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(run, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>实现核心难点：<code>timer = setTimeout(run, 1000);</code> timer 这里要重新赋值为定时器</p><p>为什么要使用 setTimeout 模拟 setInterval ？</p><p>在 setInterval(fn, delay) 中，若 fn 的执行耗时比较久，那么后面的执行的时间间隔，实际并不是 delay 的时间</p><p>setInterval 缺点：</p><ul><li>某些间隔会被跳过（丢帧现象）</li><li>定时器之间的间隔会比预期小</li></ul><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/a3910f0628ce" target="_blank" rel="noreferrer">JS进阶 -- setTimeout 模拟 setInterval</a></li><li><a href="https://segmentfault.com/a/1190000038829248" target="_blank" rel="noreferrer">为什么要用 setTimeout 模拟 setInterval ？</a></li></ul><hr><ul><li>驼峰命名 转 下划线</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toLine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\B</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_$1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// toLine(&#39;GetElementById&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;get_element_by_id&#39;</span></span></code></pre></div><p>说明，正则表达式里面的 <code>\\B</code> 表示 非单词边界的位置， <code>\\b</code> 表示单词边界的位置</p><p>正则里面 <code>\\B</code> 放在了第一个字符匹配，表示第一个字符占位不匹配，就不会被替换为 <code>_$1</code></p><ul><li>下划线命名 转 驼峰命名</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toHump</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\_</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">letter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// toHump(&#39;get_element_by_id&#39;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;getElementById&#39;</span></span></code></pre></div><h2 id="好文推荐-面经相关-博客项目推荐" tabindex="-1">好文推荐/面经相关/博客项目推荐 <a class="header-anchor" href="#好文推荐-面经相关-博客项目推荐" aria-label="Permalink to &quot;好文推荐/面经相关/博客项目推荐&quot;">​</a></h2><blockquote><p>有感好文，面经，博客，项目等</p></blockquote><h2 id="其他-todos" tabindex="-1">其他/TODOS <a class="header-anchor" href="#其他-todos" aria-label="Permalink to &quot;其他/TODOS&quot;">​</a></h2>`,31),n=[e];function h(p,k,r,d,o,E){return a(),i("div",null,n)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
