import{_ as s,o as a,c as n,V as l}from"./chunks/framework.e0e258e1.js";const A=JSON.parse('{"title":"1210 今日总结","description":"","frontmatter":{},"headers":[],"relativePath":"record-2021/12/1210.md","filePath":"record-2021/12/1210.md"}'),p={name:"record-2021/12/1210.md"},o=l(`<h1 id="_1210-今日总结" tabindex="-1">1210 今日总结 <a class="header-anchor" href="#_1210-今日总结" aria-label="Permalink to &quot;1210 今日总结&quot;">​</a></h1><p><img src="http://h2.ioliu.cn/bing/Mpumalanga_ZH-CN9666962271_1920x1080.jpg" alt=""></p><h2 id="今日工作" tabindex="-1">今日工作 <a class="header-anchor" href="#今日工作" aria-label="Permalink to &quot;今日工作&quot;">​</a></h2><ul><li>开发一个 类似 企业微信的 图片查看器，需要支持以下功能： <ul><li>弹框拖拽移动位置；</li><li>弹框放大缩小</li><li>弹框内图片移动位置</li><li>弹框内图片放大缩小旋转</li><li>底部预览列表展示</li><li>左右图片切换</li></ul></li></ul><p>不写不知道，写了才知道自己的很多 js 问题不足：</p><p>1-滥用事件没有及时清除，新旧事件互相干扰：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// window.getEventListeners(dom) 使用这个 API 查看这个 dom 上有多少个事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> img </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEventListeners</span><span style="color:#A6ACCD;">(img)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// resolve</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// register</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">evFn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListerer</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">event</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">evFn</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// remove</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListerer</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">event</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">evFn</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [])</span></span></code></pre></div><p>2-使用正则匹配 <code>transform: translate(x, y) scale(1.2) rotate(90deg)</code> ，风险大；</p><p>场景：取出里面的属性数值，第一想法：使用正则，于是就有了以下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 正则-放大缩小的数值 scale(1.2)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> scalePattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">scale</span><span style="color:#A6ACCD;">\\(</span><span style="color:#89DDFF;">([</span><span style="color:#C3E88D;">1-9</span><span style="color:#89DDFF;">]|[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]*(</span><span style="color:#A6ACCD;">\\.</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]{1,2})?)</span><span style="color:#A6ACCD;">\\)</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正则-旋转角度的正则 rotate(90deg)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rotatePattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">rotate</span><span style="color:#A6ACCD;">\\(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">\\-</span><span style="color:#89DDFF;">?</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+)</span><span style="color:#C3E88D;">deg</span><span style="color:#A6ACCD;">\\)</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正则-图片偏移x, y 的正则 translate(x, y)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> offsetPatt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">translate</span><span style="color:#A6ACCD;">\\(</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">\\-</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">\\+</span><span style="color:#89DDFF;">)?</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+(</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+)?)</span><span style="color:#C3E88D;">px</span><span style="color:#A6ACCD;">\\,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">\\-</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">\\+</span><span style="color:#89DDFF;">)?</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+(</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+)?)</span><span style="color:#C3E88D;">px</span><span style="color:#A6ACCD;">\\)</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>暂且不说这些正则是否写错，但是不擅长写正则的我，这种处理方式确实风险很大；</p><p>随后，发现了新的思路：<code>getComputedStyle</code> 以及 <code>matrix</code> 矩阵</p><p>很明显，下面这种处理方式要好得多：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//  matrix(scaleX, skew, rotate, scaleY, translateX, translateY)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// &#39;matrix(  1,      0,    999,    1,      0,           0      )&#39;  ======&gt; [99, 100, 999, 1, 0, 0]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComputedStyle</span><span style="color:#A6ACCD;">(dom)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">matrix(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(Number)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rotate</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> translateX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> translateY</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>3-被 <code>transform</code> 属性搞懵了；</p><p>对照 AntD 的 Image 组件，写到一半踩坑：</p><p>我的实现：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">img-wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform: translate(x, y) scale(1.2) rotate(90deg)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>错误的地方，在于我把 <code>transform: translate(x, y) scale(1.2) rotate(90deg)</code> 都作用在 <code>img</code> 标签上了，</p><p>问题就来了：</p><ul><li>当 图片旋转后，进行拖拽，方向错误；</li><li>当图片放大后，拖拽图片，鼠标拖动距离和图片移动距离不一致</li></ul><p>搞的晕头转向的；</p><p>参考 AntD 组件的 Image ，它是这么做的：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">img-wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform: translate(x, y)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform: scale(1.2) rotate(90deg)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>使用 <strong>图层概念</strong></p><ul><li>图片图层只负责 缩放和旋转；</li><li>外层的 wrapper 负责 拖拽移动，这样就避开了 img 里面的各种问题；</li></ul><p>相关资料：</p><ul><li><a href="https://stackoverflow.com/questions/9046741/get-event-listeners-attached-to-node-using-addeventlistener" target="_blank" rel="noreferrer">Get event listeners attached to node using addEventListener</a></li><li><a href="https://juejin.cn/post/6938439210453958692" target="_blank" rel="noreferrer">原生JS图片拖动、缩放、边界等问题总结</a> 关于图片拖动的边界问题写的很好，非常具有参考价值</li><li>对应代码：<a href="https://github.com/ysx-hidden/DOMStudy" target="_blank" rel="noreferrer">ysx-hidden/DOMStudy</a></li><li><a href="https://www.cnblogs.com/codeon/p/7576076.html" target="_blank" rel="noreferrer">div内部实现图片旋转、放大、缩小、拖拽</a></li><li><a href="https://github.io/mszhtech/ImageView" target="_blank" rel="noreferrer">github-mszhtech/ImageView</a></li><li><a href="https://blog.csdn.net/anranfengge123/article/details/106054738" target="_blank" rel="noreferrer">js 实现仿 pc 端微信查看图片功能</a></li></ul><p>4- js 数字的精度问题</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 控制台输入</span></span>
<span class="line"><span style="color:#F78C6C;">2.2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 期待</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 220</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 结果</span></span>
<span class="line"><span style="color:#F78C6C;">220.00000000000003</span></span></code></pre></div><p>我的目的是最后只要 2 位小数，那么就应该在最后所有数学计算完成后再 <code>toFixed(2)</code></p><h2 id="今日心情" tabindex="-1">今日心情 <a class="header-anchor" href="#今日心情" aria-label="Permalink to &quot;今日心情&quot;">​</a></h2><blockquote><p>所见所想，有感而发</p></blockquote><p>忙碌中...</p><p>感受到做技术攻关，克服了问题后的成就感；但是如果一直没有头绪的话，也很难受；</p><h2 id="今日算法" tabindex="-1">今日算法 <a class="header-anchor" href="#今日算法" aria-label="Permalink to &quot;今日算法&quot;">​</a></h2><p>今日学习：</p><p>今日复习：</p><h2 id="手撕代码" tabindex="-1">手撕代码 <a class="header-anchor" href="#手撕代码" aria-label="Permalink to &quot;手撕代码&quot;">​</a></h2><blockquote><p>防抖节流等各种手写，http和网络，浏览器原理，性能优化，Webpack</p></blockquote><ul><li>query 参数解析成对象</li></ul><p>最简单：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// input</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://www.baidu.com/s?name=tom&amp;age=12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://www.baidu.com/s?name=tom&amp;age=12</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transformQuery </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromEntries</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">URLSearchParams</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">_url</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">search</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">transformQuery</span><span style="color:#A6ACCD;">(url1)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { name: &#39;tom&#39;, age: &#39;12&#39; }</span></span></code></pre></div><p>其他方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://www.baidu.com/s?name=tom&amp;age=12</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transformQuery </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">search</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">search</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// return search.split(&quot;&amp;&quot;).reduce((pre, cur) =&gt; (pre[cur.split(&#39;=&#39;)[0]] = cur.split(&#39;=&#39;)[1], pre), {})</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">transformQuery</span><span style="color:#A6ACCD;">(url1)</span></span></code></pre></div><h2 id="好文推荐" tabindex="-1">好文推荐 <a class="header-anchor" href="#好文推荐" aria-label="Permalink to &quot;好文推荐&quot;">​</a></h2><blockquote><p>有感好文</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/441465938" target="_blank" rel="noreferrer">「2021」我给Vue.js生态贡献代码的这一年</a> 学习作者是如何为 vuejs 贡献代码的。</li></ul><p>代码贡献思路：</p><p>其实，对于 React 生态链，Vuejs 生态链，各自都有 hook，以及各种 工具链，但是很多工具函数本质都是 js 函数，实际上，互相 转译一下，就可以为 对应对生态链做 建设了。</p><p>好比 Java 有微服务，那么新出来的 Go 语言，是不是可以按照 Java 微服务的方式也写一套对应的 Go 微服务，与之特点结合做一些特性改造。</p><h2 id="项目-博客推荐" tabindex="-1">项目/博客推荐 <a class="header-anchor" href="#项目-博客推荐" aria-label="Permalink to &quot;项目/博客推荐&quot;">​</a></h2><blockquote><p>值得学习的项目/作者</p></blockquote><ul><li><a href="https://www.npmjs.com/package/zod" target="_blank" rel="noreferrer">前端出参校验</a></li></ul><p>来源：<a href="https://github.com/SunshowerC/blog/issues/13" target="_blank" rel="noreferrer">https://github.com/SunshowerC/blog/issues/13</a></p>`,55),e=[o];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
